/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2)
    {
        ListNode *ptr1,*ptr2,*result,*tail;
        ptr1 = list1;
        ptr2 = list2;
        if(ptr2 == NULL)
        {
            return list1;
        }
        if(ptr1 == NULL)
        {
            return list2;
        }
        if(list1 != NULL && list2 != NULL)
        {
            if(ptr1->val <= ptr2->val)
            {
               result = ptr1;
               ptr1 = ptr1->next;
            }
            else
            {
               result = ptr2;
               ptr2 = ptr2->next;
            }
            tail = result;
            while(ptr1 != NULL && ptr2 != NULL)
            {
               if(ptr1->val <= ptr2->val)
               {
                  tail->next = ptr1;
                  tail = tail->next;
                  ptr1 = ptr1->next;
                }
               else
               {
                  tail->next = ptr2;
                  tail = tail->next;
                  ptr2 = ptr2->next;
               }
            }
        }
        if(ptr1 != NULL)
        {
            tail->next = ptr1;
            ptr1 = ptr1->next; 
        }
        if(ptr2 != NULL)
        {
            tail->next = ptr2;
            ptr2 = ptr2->next;
        }
        return result;
        
    }
};
